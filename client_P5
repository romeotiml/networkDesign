import tkinter as tk
from tkinter import scrolledtext, font as tkfont, ttk
import threading
import socket
import time

# Constants
SERVER_ADDRESS = 'localhost'
SERVER_PORT = 12001
TIMEOUT = 0.5  # Timeout for ACK waiting
SEQUENCE_SIZE = 4
CHECKSUM_SIZE = 16
PACKET_SIZE = 1024
WINDOW_SIZE = 10  # Size of the sliding window

def calculate_checksum(data):
    s = sum(data)
    checksum_hex = hex(s & 0xffffffffffffffff)[2:].zfill(16)
    return checksum_hex.encode('utf-8')

def verify_checksum(seq_num_bytes, received_checksum, data):
    calculated_checksum = calculate_checksum(seq_num_bytes + data)
    return calculated_checksum == received_checksum

def create_packet(seq_num, data):
    seq_num_bytes = seq_num.to_bytes(SEQUENCE_SIZE, byteorder='big')
    checksum = calculate_checksum(seq_num_bytes + data)
    return seq_num_bytes + checksum + data

def send_rdt_packets(gui):
    start_time = time.time()  # Record the start time
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    client_socket.settimeout(TIMEOUT)
    FILE_PATH = r"C:\Users\romeo\OneDrive\Music\Desktop\GT3.bmp"
    base = 0
    next_seq_num = 0
    packets = []
    bytes_sent = 0

    try:
        with open(FILE_PATH, "rb") as file:
            data = file.read()
            total_bytes = len(data)
            file.seek(0)
            while True:
                chunk = file.read(PACKET_SIZE)
                if not chunk:
                    break
                packet = create_packet(next_seq_num, chunk)
                packets.append(packet)
                next_seq_num += 1

        next_seq_num = 0  # Reset next_seq_num for sending process

        while base < len(packets):
            while next_seq_num < base + WINDOW_SIZE and next_seq_num < len(packets):
                client_socket.sendto(packets[next_seq_num], (SERVER_ADDRESS, SERVER_PORT))
                gui.write(f"Sent packet {next_seq_num}, waiting for ACK...\n")
                packet_size = len(packets[next_seq_num]) - SEQUENCE_SIZE - CHECKSUM_SIZE  # Actual data length
                bytes_sent += packet_size
                bytes_sent = min(bytes_sent, total_bytes)  # Ensure it does not exceed the file size
                gui.update_progress(bytes_sent, total_bytes)
                next_seq_num += 1

            while base < len(packets):
                try:
                    ack_packet, _ = client_socket.recvfrom(SEQUENCE_SIZE + CHECKSUM_SIZE)
                    ack_seq_num = int.from_bytes(ack_packet[:SEQUENCE_SIZE], byteorder='big')

                    if verify_checksum(ack_packet[:SEQUENCE_SIZE], ack_packet[SEQUENCE_SIZE:], b''):
                        gui.write(f"Received ACK for packet {ack_seq_num}.\n")
                        if base <= ack_seq_num:
                            base = ack_seq_num + 1
                            gui.write(f"Window moved. New base is {base}.\n")
                            if base >= len(packets):
                                gui.update_progress(total_bytes, total_bytes)  # Ensure progress is 100%
                                break
                except socket.timeout:
                    gui.write("Timeout, resending packets...\n")
                    for i in range(base, min(base + WINDOW_SIZE, len(packets))):
                        client_socket.sendto(packets[next_seq_num], (SERVER_ADDRESS, SERVER_PORT))
                        gui.write(f"Sent packet {next_seq_num}, waiting for ACK...\n")
                        next_seq_num +=1
                        gui.write(f"Resent packet {i}.\n")
                    break

    except FileNotFoundError:
        gui.write("File not found. Please check the file path.\n")
    except socket.error as e:
        gui.write(f"Socket error: {e}\n")
    finally:
        client_socket.close()
        end_time = time.time()  # Record the end time
        duration = end_time - start_time  # Calculate the duration
        gui.write("File transfer completed.\n")
        gui.write(f"Time Taken: {duration:.2f} seconds\n")  # Display the duration
        gui.update_progress(total_bytes, total_bytes)  # Explicitly set to 100% at completion

class ClientGUI:
    def __init__(self, root):
        self.root = root
        root.title("Phase 5 Interface")
        root.geometry('1250x800')

        custom_font_1 = tkfont.Font(family="Times New Roman", size=24, weight='bold')
        custom_font_2 = tkfont.Font(family="Times New Roman", size=16)
        custom_font_3 = tkfont.Font(family="Times New Roman", size=12)

        self.label_button = tk.Label(root, text="Group 7 -- Phase 5", font=custom_font_1)
        self.label_button.pack(pady=(20, 0))

        self.start_btn = tk.Button(root, text="Start Transfer", command=self.start_transfer, font=custom_font_3)
        self.start_btn.pack(pady=(20, 30), padx=(100, 0), anchor='w')

        self.label_status = tk.Label(root, text="Transfer Status:", font=custom_font_2)
        self.label_status.pack(pady=(10, 5))

        self.status_txt = scrolledtext.ScrolledText(root, height=20)
        self.status_txt.pack(padx=20, pady=20)

        self.progress_label = tk.Label(root, text="Progress: 0%", font=custom_font_2)
        self.progress_label.pack(pady=(5, 5))
        self.progress = ttk.Progressbar(root, orient='horizontal', length=400, mode='determinate')
        self.progress.pack(pady=(10, 10))

    def start_transfer(self):
        self.status_txt.insert(tk.END, "Starting file transfer...\n")
        threading.Thread(target=send_rdt_packets, args=(self,)).start()

    def update_progress(self, bytes_sent, total_bytes):
        percent_complete = (bytes_sent / total_bytes) * 100
        self.progress['value'] = percent_complete
        self.progress_label.config(text=f"Progress: {percent_complete:.2f}%")
        self.root.update()

    def write(self, text):
        self.status_txt.insert(tk.END, text)
        self.status_txt.see(tk.END)
        self.root.update()

    def flush(self):
        pass

if __name__ == "__main__":
    root = tk.Tk()
    gui = ClientGUI(root)
    root.mainloop()

