import socket
import time

# Constants
SERVER_ADDRESS = 'localhost'
SERVER_PORT = 12001
TIMEOUT = 0.5  # Timeout for ACK waiting
SEQUENCE_SIZE = 4
CHECKSUM_SIZE = 16
PACKET_SIZE = 1024
WINDOW_SIZE = 10  # Size of the sliding window

# Function to calculate checksum
def calculate_checksum(data):
    s = sum(data)
    checksum_hex = hex(s & 0xffffffffffffffff)[2:].zfill(16)
    return checksum_hex.encode('utf-8')

# Function to verify checksum
def verify_checksum(seq_num_bytes, received_checksum, data):
    calculated_checksum = calculate_checksum(seq_num_bytes + data)
    return calculated_checksum == received_checksum

# Function to create packet
def create_packet(seq_num, data):
    seq_num_bytes = seq_num.to_bytes(SEQUENCE_SIZE, byteorder='big')
    checksum = calculate_checksum(seq_num_bytes + data)
    return seq_num_bytes + checksum + data

# Function to send RDT packets using Go-Back-N protocol
def send_rdt_packets():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    client_socket.settimeout(TIMEOUT)
    FILE_PATH = r"C:\Users\romeo\OneDrive\Music\Desktop\GT3.bmp"
    base = 0
    next_seq_num = 0
    packets = []
    start_time = time.time()

    try:
        with open(FILE_PATH, "rb") as file:
            while True:
                data = file.read(PACKET_SIZE)
                if not data:
                    break
                packet = create_packet(next_seq_num, data)
                packets.append(packet)
                next_seq_num += 1

        next_seq_num = 0  # Reset next_seq_num for sending process

        # Loop until all packets are acknowledged
        while base < len(packets):
            # Send window of packets
            while next_seq_num < base + WINDOW_SIZE and next_seq_num < len(packets):
                client_socket.sendto(packets[next_seq_num], (SERVER_ADDRESS, SERVER_PORT))
                print(f"Sent packet {next_seq_num}, waiting for ACK...")
                next_seq_num += 1

            # Try to receive all outstanding ACKs before timeout
            while base < len(packets):
                try:
                    ack_packet, _ = client_socket.recvfrom(SEQUENCE_SIZE + CHECKSUM_SIZE)
                    ack_seq_num = int.from_bytes(ack_packet[:SEQUENCE_SIZE], byteorder='big')

                    if verify_checksum(ack_packet[:SEQUENCE_SIZE], ack_packet[SEQUENCE_SIZE:], b''):
                        print(f"Received ACK for packet {ack_seq_num}.")
                        if base <= ack_seq_num:
                            base = ack_seq_num + 1
                            print(f"Window moved. New base is {base}.")
                            if base >= len(packets):
                                break
                except socket.timeout:
                    print("Timeout, resending packets...")
                    for i in range(base, min(base + WINDOW_SIZE, len(packets))):
                        client_socket.sendto(packets[i], (SERVER_ADDRESS, SERVER_PORT))
                        print(f"Resent packet {i}.")
                    break

    except FileNotFoundError:
        print("File not found. Please check the file path.")
    except socket.error as e:
        print(f"Socket error: {e}")
    finally:
        client_socket.close()
        end_time = time.time()
        print("File transfer completed.")
        print(f"Start Time: {time.strftime('%X', time.localtime(start_time))}")
        print(f"End Time: {time.strftime('%X', time.localtime(end_time))}")
        print(f"Time Taken: {end_time - start_time:.2f} seconds")

if __name__ == "__main__":
    send_rdt_packets()
