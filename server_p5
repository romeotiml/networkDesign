from socket import *
import os
import random

SERVER_PORT = 12001
SEQUENCE_SIZE = 4
CHECKSUM_SIZE = 16
WINDOW_SIZE = 10  # Adjust window size as needed

# Scenario settings for server
DATA_PACKET_BIT_ERROR_RATE = 0  # Bit error rate for data packets
DATA_PACKET_LOSS_RATE = 0  # Loss rate for data packets
ACK_PACKET_LOSS_RATE = 0  # Able to handle 0 to 70 percent ACK loss rate
ACK_BIT_ERROR_RATE = 0.7  # Able to handle 0 to 70 percent Bit error rate
TIMEOUT = 0.5  # Timeout value for retransmissions

# Function to calculate checksum
def calculate_checksum(data):
    s = sum(data)
    checksum_hex = hex(s & 0xffffffffffffffff)[2:].zfill(16)
    return checksum_hex.encode('utf-8')

# Function to verify checksum
def verify_checksum(seq_num_bytes, received_checksum, data):
    calculated_checksum = calculate_checksum(seq_num_bytes + data)
    return calculated_checksum == received_checksum

# Function to simulate data packet bit errors
def introduce_data_packet_bit_errors(data_packet, error_rate):
    if random.random() < error_rate:
        byte_index = random.randint(SEQUENCE_SIZE + CHECKSUM_SIZE, len(data_packet) - 1)
        bit_index = random.randint(0, 7)  # Select a random bit position within the byte
        corrupted_byte = data_packet[byte_index] ^ (1 << bit_index)  # Flip the selected bit
        data_packet = data_packet[:byte_index] + bytes([corrupted_byte]) + data_packet[byte_index + 1:]
    return data_packet

# Function to introduce bit errors into ACK packets
def introduce_ack_bit_errors(packet, error_rate):
    byte_array = bytearray(packet)
    num_errors = int(len(byte_array) * error_rate)
    for _ in range(num_errors):
        bit_position = random.randint(0, len(byte_array) * 8 - 1)  # Total number of bits
        byte_index = bit_position // 8
        bit_index = bit_position % 8
        byte_array[byte_index] ^= (1 << bit_index)
    return bytes(byte_array)

# Function to create acknowledgment packet
def create_ack_packet(seq_num):
    print("Attempting to create ACK packet!")
    seq_num_bytes = seq_num.to_bytes(SEQUENCE_SIZE, byteorder='big')
    checksum = calculate_checksum(seq_num_bytes)
    ack_packet = seq_num_bytes + checksum
    print(f"ACK packet created with sequence number {seq_num} and checksum {checksum.hex()}.")

    # Introduce bit errors in the ACK packet
    if random.random() < ACK_BIT_ERROR_RATE:
        ack_packet = introduce_ack_bit_errors(ack_packet, ACK_BIT_ERROR_RATE)
        print(f"Introduced bit errors to ACK packet for sequence number {seq_num}.")

    # Simulate ACK packet loss
    if random.random() < ACK_PACKET_LOSS_RATE:
        print(f"Simulating ACK packet loss for sequence number {seq_num}.")
        return None  # Simulate ACK loss by returning None

    return ack_packet
# Function to start UDP server
def start_udp_server(port=SERVER_PORT):
    server_socket = socket(AF_INET, SOCK_DGRAM)
    server_socket.bind(('', port))
    print(f"Server listening on port {port}.")

    output_directory = r"C:\Users\romeo\OneDrive\Music\Desktop"
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
    output_file_path = os.path.join(output_directory, 'output.bmp')

    next_seq_num = 0  # Expected sequence number of the next packet
    packet_buffer = {}
    window_base = 0

    with open(output_file_path, 'wb') as file:
        print("Ready to receive data...")

        while True:
            packet, client_address = server_socket.recvfrom(2048)
            print(f"Packet received from {client_address}.")

            if random.random() < DATA_PACKET_LOSS_RATE:
                print("Simulating data packet loss.")
                continue  # Skip processing this packet to simulate loss

            seq_num_bytes = packet[:SEQUENCE_SIZE]
            received_checksum = packet[SEQUENCE_SIZE:SEQUENCE_SIZE + CHECKSUM_SIZE]
            data = packet[SEQUENCE_SIZE + CHECKSUM_SIZE:]
            seq_num = int.from_bytes(seq_num_bytes, byteorder='big')

            # Simulate data packet bit-error
            data = introduce_data_packet_bit_errors(data, DATA_PACKET_BIT_ERROR_RATE)

            if verify_checksum(seq_num_bytes, received_checksum, data):
                seq_num = int.from_bytes(seq_num_bytes, byteorder='big')
                print(f"Checksum verified for packet {seq_num}.")

                if window_base <= seq_num < window_base + WINDOW_SIZE:
                    packet_buffer[seq_num] = data
                    # Send acknowledgment
                    ack_packet = create_ack_packet(seq_num)
                    if ack_packet:
                        server_socket.sendto(ack_packet, client_address)
                        print(f"ACK sent for packet {seq_num}.")
                    else:
                        print(f"ACK for packet {seq_num} was dropped due to simulation.")

                    # Slide window and write data to file if packets are in order
                    while window_base in packet_buffer:
                        file.write(packet_buffer[window_base])
                        print(f"Packet {window_base} accepted and processed.")
                        del packet_buffer[window_base]
                        window_base += 1
            else:
                print(f"Checksum mismatch for packet {seq_num}. Packet discarded.")

    server_socket.close()
    print("Server shutdown.")

if __name__ == "__main__":
    start_udp_server()
